name: Pull Request Workflow

on:
  pull_request:
  merge_group:

jobs:
  code_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - run: ./scripts/generate-locale-config.sh
      - run: git diff --exit-code
      - run: cat .github/workflows/versions.env >> $GITHUB_ENV
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      - run: flutter pub get
      - run: flutter gen-l10n
      - name: Check formatting
        run: dart format lib/ test/ --set-exit-if-changed
      - name: Check import formatting
        run: dart run import_sorter:main --no-comments --exit-if-changed
      - name: Check license compliance
        run: dart run license_checker check-licenses -c licenses.yaml --problematic
      - run: flutter analyze
      - name: Add Firebase Messaging
        run: ./scripts/add-firebase-messaging.sh
      - run: flutter analyze
      - run: flutter test

  build_debug_apk:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - run: cat .github/workflows/versions.env >> $GITHUB_ENV
      - uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "zulu"
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      - uses: moonrepo/setup-rust@v1
      - run: flutter pub get
      - run: flutter build apk --debug --target-platform android-arm64

  build_debug_web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - run: cat .github/workflows/versions.env >> $GITHUB_ENV
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      - uses: moonrepo/setup-rust@v1
      - run: rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
      - run: flutter pub get
      - name: Prepare web
        run: ./scripts/prepare-web.sh
      - run: flutter build web --dart-define=WITH_SEMANTICS=true
      - name: Upload Web Build
        uses: actions/upload-artifact@v5
        with:
          name: Web Build
          path: build/web

  build_debug_linux:
    strategy:
      matrix:
        arch: [ x64, arm64 ]
    runs-on: ${{ matrix.arch == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-latest'}}
    steps:
      - uses: actions/checkout@v5
      - run: cat .github/workflows/versions.env >> $GITHUB_ENV
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install git wget curl clang cmake ninja-build pkg-config libgtk-3-dev libblkid-dev liblzma-dev libjsoncpp-dev cmake-data libsecret-1-dev libsecret-1-0 librhash0 libssl-dev libwebkit2gtk-4.1-dev -y
      - name: Install Flutter
        run: |
          git clone --branch ${{ env.FLUTTER_VERSION }} https://github.com/flutter/flutter.git
          ./flutter/bin/flutter doctor
      - uses: moonrepo/setup-rust@v1
      - run: ./flutter/bin/flutter pub get
      - run: ./flutter/bin/flutter build linux --target-platform linux-${{ matrix.arch }}

  build_debug_ios:
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v5
      - run: cat .github/workflows/versions.env >> $GITHUB_ENV
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      - name: Use Xcode 16.4
        run: sudo xcode-select --switch /Applications/Xcode_16.4.app
      - run: brew install sqlcipher
      - uses: moonrepo/setup-rust@v1
      - name: Add Firebase Messaging
        run: |
          flutter pub add fcm_shared_isolate:0.1.0
          sed -i '' 's,//<GOOGLE_SERVICES>,,g' lib/utils/background_push.dart
      - run: flutter pub get
      - run: flutter build ios --no-codesign

  integration_test_web:
    runs-on: ubuntu-latest
    needs: [ build_debug_web ]
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download build folder
        uses: actions/download-artifact@v4
        with:
          name: Web Build
          path: build/web
      - uses: remarkablemark/setup-maestro-cli@v1
      - name: Serve web app
        run: npx --yes serve build/web/ -l 4567 &
      - name: Run maestro test
        run: |
          source integration_test/data/integration_users.env
          docker run -d --name synapse --tmpfs /data \
          --volume="$(pwd)/integration_test/synapse/data/homeserver.yaml":/data/homeserver.yaml:rw \
          --volume="$(pwd)/integration_test/synapse/data/localhost.log.config":/data/localhost.log.config:rw \
          -p 80:80 matrixdotorg/synapse:latest
          while ! curl -XGET "http://$HOMESERVER/_matrix/client/v3/login" >/dev/null 2>/dev/null; do
          echo "Waiting for homeserver to be available... (GET http://$HOMESERVER/_matrix/client/v3/login)"
            sleep 2
          done

          echo "Homeserver is online!"

          # create users
          curl -fS --retry 3 -XPOST -d "{\"username\":\"$USER1_NAME\", \"password\":\"$USER1_PW\", \"inhibit_login\":true, \"auth\": {\"type\":\"m.login.dummy\"}}" "http://$HOMESERVER/_matrix/client/r0/register"
          curl -fS --retry 3 -XPOST -d "{\"username\":\"$USER2_NAME\", \"password\":\"$USER2_PW\", \"inhibit_login\":true, \"auth\": {\"type\":\"m.login.dummy\"}}" "http://$HOMESERVER/_matrix/client/r0/register"

          touch chromedriver_logs.txt
          export DISPLAY=:99
          Xvfb :99 -screen 0 1280x1024x24 &
          chromedriver --port=4444 --readable-timestamp --enable-chrome-logs 2>&1 | tee chromedriver_logs.txt &
          maestro test integration_test/login.yaml --env HOMESERVER=${HOMESERVER} --env USER1_NAME=${USER1_NAME} --env USER1_PW=${USER1_PW}
      - name: Upload logs
        #if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: Logs
          path: chromedriver_logs.txt